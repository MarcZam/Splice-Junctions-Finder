getwd()
library(e1071)
NB_algor <- function(df_train, df_test, df_train_labels, df_test_labels, laplace = c(0, 1)){
for(i in laplace){
model_preds <- naiveBayes(df_train, df_train_labels, laplace = i)
p <- predict(model_preds, df_test)
tab <- table(df_test_labels, p, dnn = c("Actual", "Predicha"))
confusionMatrix(tab)
}
}
library(e1071)
NB_algor <- function(df_train, df_test, df_train_labels, df_test_labels, laplace = c(0, 1)){
for(i in laplace){
model_preds <- naiveBayes(df_train, df_train_labels, laplace = i)
p <- predict(model_preds, df_test)
tab <- table(df_test_labels, p, dnn = c("Actual", "Predicha"))
print(confusionMatrix(tab))
}
}
library(e1071)
NB_algor <- function(df_train, df_test, df_train_labels, df_test_labels, laplace = c(0, 1)){
for(i in laplace){
model_preds <- naiveBayes(df_train, df_train_labels, laplace = i)
p <- predict(model_preds, df_test)
tab <- table(df_test_labels, p, dnn = c("Actual", "Predicha"))
print(confusionMatrix(tab))
}
return(confusionMatrix(tab))
}
library(e1071)
NB_algor <- function(df_train, df_test, df_train_labels, df_test_labels, laplace = c(0, 1)){
for(i in laplace){
model_preds <- naiveBayes(df_train, df_train_labels, laplace = i)
p <- predict(model_preds, df_test)
tab <- table(df_test_labels, p, dnn = c("Actual", "Predicha"))
print(p)
}
}
library(e1071)
NB_algor <- function(df_train, df_test, df_train_labels, df_test_labels, laplace = c(0, 1)){
for(i in laplace){
model_preds <- naiveBayes(df_train, df_train_labels, laplace = i)
p <- predict(model_preds, df_test)
tab <- table(df_test_labels, p, dnn = c("Actual", "Predicha"))
print(p)
}
return(p)
}
library(e1071)
NB_algor <- function(df_train, df_test, df_train_labels, df_test_labels, laplace = c(0, 1)){
for(i in laplace){
model_preds <- naiveBayes(df_train, df_train_labels, laplace = i)
p <- predict(model_preds, df_test)
tab <- table(df_test_labels, p, dnn = c("Actual", "Predicha"))
print(confusionMatrix(tab))
}
}
NB_algor(df_train, df_test, df_train_labels, df_test_labels)
library(e1071)
nb_train_labels <- for(i in df_train_labels){if(i != 'N'){i == 'SJ'}}
nb_train_labels
nb_test_labels
NB_algor <- function(df_train, df_test, df_train_labels, df_test_labels, laplace = c(0, 1)){
for(i in laplace){
model_preds <- naiveBayes(df_train, df_train_labels, laplace = i)
p <- predict(model_preds, df_test)
tab <- table(df_test_labels, p, dnn = c("Actual", "Predicha"))
print(confusionMatrix(tab))
}
}
NB_algor(df_train, df_test, df_train_labels, df_test_labels, laplace = 0)
df_train_labels
SpliceData <- read.csv("splice.csv", sep = ",", header = TRUE)
# Convertimos nuestra clase en un factor de 3 niveles
SpliceData$class <- factor(SpliceData$class, levels = c("EI", "IE", "N"))
knitr::kable(head(SpliceData[,1:10])) %>%
kable_minimal(full_width = T)
table_prop <- count(SpliceData, class)
colnames(table_prop) <- c("Límite","Frecuencia")
knitr::kable(table_prop) %>%
kable_minimal(full_width = F)
knitr::opts_chunk$set(echo = TRUE, comment = NULL)
setwd('D:/Docs/Masteres/Master en Bioinformática y Bioestadística/Tercer Semestre/M0.163 - Machine Learning/Splice-Junctions-Finder')
library(dplyr)
library(kableExtra)
library(caret)
library(class)
library(gmodels)
library(e1071)
SpliceData <- read.csv("splice.csv", sep = ",", header = TRUE)
# Convertimos nuestra clase en un factor de 3 niveles
SpliceData$class <- factor(SpliceData$class, levels = c("EI", "IE", "N"))
knitr::kable(head(SpliceData[,1:10])) %>%
kable_minimal(full_width = T)
table_prop <- count(SpliceData, class)
colnames(table_prop) <- c("Límite","Frecuencia")
knitr::kable(table_prop) %>%
kable_minimal(full_width = F)
tt_split <- function(df, train_percentage){
set.seed(123)
# Aleatoreizamos las filas del dataset introducido para que si están ordenadas, esto no afecte a las predicciones del modelo
rows <- sample(nrow(df), replace =FALSE)
df <- df[rows, ]
# dividimos los data sets en train y test data y extraemos la columna correspondiente a las labels para cada set
percent <- round(((nrow(SpliceData)/100) * train_percentage), 0)
df_train <<- df[1:percent, -c(1,2)]
df_test <<- df[(percent+1):nrow(df), -c(1,2)]
# dividimos los data sets en train y test data y extraemos la columna correspondiente a las labels para cada set
df_train_labels <<- c(df[1:percent, 1])
df_test_labels <<- c(df[(percent+1):nrow(df),1])
}
tt_split(SpliceData, 67)
df_train_labels
df_train_labels
nb_train_labels <- for(i in df_train_labels){if(i != 'N'){i == 'SJ'}}
df_train_labels
nb_train_labels <- for(i in df_train_labels){if(i != 'N'){i == 'SJ'}}
nb_train_labels
df_train_labels
nb_train_labels <- for(i in c(df_train_labels)){if(i != 'N'){i == 'SJ'}}
nb_train_labels
df_train_labels
nb_train_labels <- for(i in df_train_labels){print(i)}
nb_train_labels
df_train_labels
nb_train_labels <- for(i in df_train_labels){ifelse(i != 'N' == 'SJ', i )}
nb_train_labels
df_train_labels
nb_train_labels <- for(i in df_train_labels){ifelse((i != 'N') == 'SJ', i )}
nb_train_labels
df_train_labels
nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels <- c(df_train_labels)
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
vector_labels
vector_labels <- c(df_train_labels)
nb_train_labels <- c()
for(i in vector_labels){
if(i != 'N'){
append(nb_train_labels, 'SJ')
}
else{
append(nb_train_labels, i)
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels <- c(df_train_labels)
nb_train_labels <- c()
for(i in vector_labels){
if(i != 'N'){
nb_train_lables <- append(nb_train_labels, 'SJ')
}
else{
nb_train_lables <- append(nb_train_labels, i)
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels <- c(df_train_labels)
nb_train_labels <- c()
for(i in vector_labels){
append(nb_train_labels, i)
# if(i != 'N'){
#   nb_train_lables <- append(nb_train_labels, 'SJ')
# }
# else{
#   nb_train_lables <- append(nb_train_labels, i)
# }
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels <- c(df_train_labels)
nb_train_labels <- c()
for(i in vector_labels){
nb_train_labels <- append(nb_train_labels, i)
# if(i != 'N'){
#   nb_train_lables <- append(nb_train_labels, 'SJ')
# }
# else{
#   nb_train_lables <- append(nb_train_labels, i)
# }
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels <- c(df_train_labels)
nb_train_labels <- c()
for(i in vector_labels){
if(i == "N"){
nb_train_lables <- append(nb_train_labels, i)
}
else{
nb_train_lables <- append(nb_train_labels, "SJ")
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels <- c(df_train_labels)
nb_train_labels <- c()
for(i in vector_labels){
if(i not null){
nb_train_lables <- append(nb_train_labels, i)
}
else{
nb_train_lables <- append(nb_train_labels, "SJ")
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels <- c(df_train_labels)
nb_train_labels <- c()
for(i in vector_labels){
if(i != NULL){
nb_train_lables <- append(nb_train_labels, i)
}
else{
nb_train_lables <- append(nb_train_labels, "SJ")
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(i ){
nb_train_lables <- append(nb_train_labels, i)
}
else{
nb_train_lables <- append(nb_train_labels, "SJ")
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(i == "N"){
nb_train_lables <- append(nb_train_labels, i)
}
else{
nb_train_lables <- append(nb_train_labels, "SJ")
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(i is "N"){
nb_train_lables <- append(nb_train_labels, i)
}
else{
nb_train_lables <- append(nb_train_labels, "SJ")
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(i == "N"){
nb_train_lables <- append(nb_train_labels, i)
}
else{
nb_train_lables <- append(nb_train_labels, "SJ")
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(vector_labels[i] != "N"){
vector_labels[i] <- "SJ"
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(vector_labels[i] != "N"){
print(i)
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
#vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in 1:vector_labels){
if(vector_labels[i] != "N"){
vector_labels[i] <- "SJ"
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i vector_labels){
print(i)
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
print(i)
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(i == "N"){
print(i)
}
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
#vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(i == "N"){
replace(i, "SJ")
}
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
#vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(i == "N"){
replace(vector_labels, i, "SJ")
}
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
#vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(i == "N"){
replace(vector_labels, i, "SJ")
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
#vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(i == "N"){
replace(vector_labels, i, "SJ")
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
vector_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(i == "N"){
nb_train_labels <- append(nb_train_labels, "SJ")
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
vector_labels <- c(as.character(df_train_labels))
nb_train_labels <- c()
for(i in vector_labels){
if(i != "N"){
nb_train_labels <- append(nb_train_labels, "SJ")
}
else{
nb_train_labels <- append(nb_train_labels, i)
}
}
#nb_train_labels <- for(i in df_train_labels){ifelse((i is not 'N') == 'SJ', i )}
nb_train_labels
modifyLabels <- function(labels){
vector_labels <- c(as.character(labels))
new_labels <- c()
for(i in vector_labels){
if(i != "N"){
new_labels <- append(new_labels, "SJ")
}
else{
new_labels <- append(new_labels, i)
}
}
new_labels <- as.factor(new_labels, levels =c("N", "SJ"))
return(new_labels)
}
nb_train_labels <- modifyLabels(df_train_labels)
nb_test_labels <- modifyLabels(df_test_labels)
modifyLabels <- function(labels){
vector_labels <- c(as.character(labels))
new_labels <- c()
for(i in vector_labels){
if(i != "N"){
new_labels <- append(new_labels, "SJ")
}
else{
new_labels <- append(new_labels, i)
}
}
new_labels <- factor(new_labels, levels =c("N", "SJ"))
return(new_labels)
}
nb_train_labels <- modifyLabels(df_train_labels)
nb_test_labels <- modifyLabels(df_test_labels)
modifyLabels <- function(labels){
vector_labels <- c(as.character(labels))
new_labels <- c()
for(i in vector_labels){
if(i != "N"){
new_labels <- append(new_labels, "SJ")
}
else{
new_labels <- append(new_labels, i)
}
}
new_labels <- factor(new_labels, levels =c("N", "SJ"))
return(new_labels)
}
nb_train_labels <- modifyLabels(df_train_labels)
nb_test_labels <- modifyLabels(df_test_labels)
modifyLabels <- function(labels){
vector_labels <- c(as.character(labels))
new_labels <- c()
for(i in vector_labels){
if(i != "N"){
new_labels <- append(new_labels, "SJ")
}
else{
new_labels <- append(new_labels, i)
}
}
return(new_labels)
}
nb_train_labels <- factor(modifyLabels(df_train_labels), levels =c("N", "SJ"))
nb_test_labels <- factor(modifyLabels(df_test_labels), levels =c("N", "SJ"))
